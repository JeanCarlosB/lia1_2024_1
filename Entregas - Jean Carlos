{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1UWg6Xz_iZEWtWsjWrUJNjZZzFWC69VXn",
      "authorship_tag": "ABX9TyOkmSfvS6icNVYmRj0zqJZ2",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/JeanCarlosB/lia1_2024_1/blob/main/Entregas%20-%20Jean%20Carlos\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "## Projeto Ponta a Ponta - Construindo um Modelo com outro dataset\n",
        "### Problema: construir um modelo de Intelig√™ncia Artificial capaz de classificar imagens, considerando 10 categorias, sendo: airplane; automobile; bird; cat; deer; dog; frog; horse; ship; truck.\n",
        "\n",
        "### N√£o h√° m√°gica. H√° matem√°tica! üßô\n",
        "\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "RzCDgPgq6Xsz"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Importando o necess√°rio\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import datasets, layers, models\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from PIL import Image"
      ],
      "metadata": {
        "id": "fOYdxsEc6YOW"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Carrega o dataset  - J√° est√° no Keras!\n",
        "(imagens_treino, labels_treino), (imagens_teste, labels_teste) = datasets.mnist.load_data(path=\"mnist.npz\")"
      ],
      "metadata": {
        "id": "YoOXdcOJ7or_"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Classes das imagens\n",
        "nomes_classes = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']"
      ],
      "metadata": {
        "id": "EwYf4mXX8Z2m"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Pr√© processamento**"
      ],
      "metadata": {
        "id": "rxlt5Mpp8uBN"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Normaliza os valores dos pixels para que os dados fiquem na mesma escala\n",
        "imagens_treino = imagens_treino / 255.0\n",
        "imagens_teste = imagens_teste / 255.0"
      ],
      "metadata": {
        "id": "Cj8wo89e9u7f"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Fun√ß√£o para exibir as imagens\n",
        "def visualiza_imagens(images, labels):\n",
        "    plt.figure(figsize = (8,8))\n",
        "    for i in range(16):\n",
        "        plt.subplot(4, 4, i+1)\n",
        "        plt.xticks([])\n",
        "        plt.yticks([])\n",
        "        plt.grid(False)\n",
        "        plt.imshow(images[i], cmap = plt.cm.binary)\n",
        "        plt.xlabel(nomes_classes[labels[i]])\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "rIzyiHpt8wrb"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Executa a fun√ß√£o\n",
        "visualiza_imagens(imagens_treino, labels_treino)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 672
        },
        "id": "Bdg3baU8-YDf",
        "outputId": "f19e755a-d3fc-4357-d52d-cff46d63b35d"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x800 with 16 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Criando Modelo"
      ],
      "metadata": {
        "id": "vVAtWFnY-iJR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Arquitetura do Modelo -> Feature Learning\n",
        "\n",
        "# Cria o objeto de sequ√™ncia de camadas - do Keras\n",
        "modelo_lia = models.Sequential()\n",
        "\n",
        "# Adiciona a primeira camada de convolu√ß√£o e max pooling (camada de entrada)\n",
        "modelo_lia.add(layers.Conv2D(28, (3, 3), activation = 'relu', input_shape = (28, 28, 1)))\n",
        "modelo_lia.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "# Adiciona a segunda camada de convolu√ß√£o e max pooling (camada intermedi√°ria)\n",
        "modelo_lia.add(layers.Conv2D(64, (3, 3), activation = 'relu'))\n",
        "modelo_lia.add(layers.MaxPooling2D((2, 2)))\n",
        "\n",
        "# Adiciona a terceira camada de convolu√ß√£o e max pooling (camada intermedi√°ria)\n",
        "modelo_lia.add(layers.Conv2D(64, (3, 3), activation = 'relu'))\n",
        "modelo_lia.add(layers.MaxPooling2D((2, 2)))"
      ],
      "metadata": {
        "id": "slAru3uc-jAh"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Adicionar camadas de classifica√ß√£o - Converte para um vetor - flatten\n",
        "modelo_lia.add(layers.Flatten())\n",
        "modelo_lia.add(layers.Dense(64, activation = 'relu'))\n",
        "modelo_lia.add(layers.Dense(10, activation = 'softmax'))"
      ],
      "metadata": {
        "id": "kqUlf9GD-jpc"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Compila√ß√£o do modelo\n",
        "modelo_lia.compile(optimizer = 'adam',\n",
        "                   loss = 'sparse_categorical_crossentropy',\n",
        "                   metrics = ['accuracy'])\n",
        "\n",
        "# adam - √© um algoritmo de aprendizagem tipo backpropagation!\n",
        "# loss - fun√ß√£o de erro. Isso se resume a uma otimiza√ß√£o fun√ß√£o matem√°tica!\n",
        "# metrics - medir o sucesso!"
      ],
      "metadata": {
        "id": "y1yhA9M1-1wm"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# treinamento"
      ],
      "metadata": {
        "id": "225oKVr3_juY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Executando o treinamento\n",
        "%%time\n",
        "history = modelo_lia.fit(imagens_treino,\n",
        "                         labels_treino,\n",
        "                         epochs = 5,\n",
        "                         validation_data = (imagens_teste, labels_teste))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ddua__Yl_rRv",
        "outputId": "b63cea1d-2984-49d1-e28a-6f8aa1b62f0e"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/5\n",
            "1875/1875 [==============================] - 52s 26ms/step - loss: 0.2188 - accuracy: 0.9316 - val_loss: 0.0856 - val_accuracy: 0.9748\n",
            "Epoch 2/5\n",
            "1875/1875 [==============================] - 50s 27ms/step - loss: 0.0725 - accuracy: 0.9784 - val_loss: 0.0631 - val_accuracy: 0.9808\n",
            "Epoch 3/5\n",
            "1875/1875 [==============================] - 48s 26ms/step - loss: 0.0520 - accuracy: 0.9843 - val_loss: 0.0533 - val_accuracy: 0.9842\n",
            "Epoch 4/5\n",
            "1875/1875 [==============================] - 48s 26ms/step - loss: 0.0414 - accuracy: 0.9873 - val_loss: 0.0554 - val_accuracy: 0.9838\n",
            "Epoch 5/5\n",
            "1875/1875 [==============================] - 47s 25ms/step - loss: 0.0322 - accuracy: 0.9903 - val_loss: 0.0550 - val_accuracy: 0.9840\n",
            "CPU times: user 6min 4s, sys: 8.23 s, total: 6min 12s\n",
            "Wall time: 4min 24s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Carrega uma nova imagem\n",
        "nova_imagem = Image.open(\"/content/drive/MyDrive/LIA/Aula 08/f3efd3ca626359f8e18fc075bf35760e.jpg\")\n",
        "\n",
        "# Redimensiona para 28x28 pixels e a p√µe na escala cinza\n",
        "nova_imagem = nova_imagem.convert('L')\n",
        "nova_imagem = nova_imagem.resize((28, 28))\n",
        "\n",
        "# Exibir a imagem\n",
        "plt.figure(figsize = (1,1))\n",
        "plt.imshow(nova_imagem, cmap='gray')\n",
        "plt.xticks([])\n",
        "plt.yticks([])\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 114
        },
        "id": "la7ojzW4_r8f",
        "outputId": "22a31579-136c-4a87-8cae-e0a030370e02"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 100x100 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAGEAAABhCAYAAADGBs+jAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAKnUlEQVR4nO2d22/jRBuHfz6MncSHpLHbpiuqFLYFisgKIa5ACGm5ROKSf5M/ASEESHuzWtguC9mymw1qdpPmZOfgw9jm4tOYdL9t6x7cOq0fKVJV5TCZxzPzznjmDRdFUYSca4W/7gLk5BIyQS4hA+QSMkAuIQPkEjJALiED5BIygJjkSWEY4uDgAJqmgeO4tMt0I4iiCLZt486dO+D5U671KAHtdjsCkD/O8Wi326fWb6KWoGkaAKDdbkPX9SQvufVYloXNzc247k4ikQTWBem6fm0SKKWYTqfwfR9hGCIIAiRZ9hIEAYQQ8DyPQqGAQqFwBaX9jyTddyIJWcBxHLx+/ToW4bpuIgmyLKNUKoEQAsMwIMty5sa1zEsIggBhGMJ1Xdi2Ddu2QSmF53kIw/DU18uyDN/3QQiBqqqIoiiXcBZc10W73cbh4SF6vR4ePXqEw8NDFItFKIoCQRDe+jrWQsIwhOM4sCwLoiji/v37qFarkGUZPM9nRkamJXieh+fPn6PZbOKff/7Bjz/+iIODA5imic3NzWP79yiKEIYhoihCp9PBs2fPIAgCTNPEF198AVEUwXFcLuEkXNeF67qwLAvD4RCDwQDz+RyqqsI0TZimCcMwQAg59j2iKEIURRiPx4iiCJTSWEzW7mNlTkIQBGi1Wvj7778xHA7x4MEDNJtNrK6u4ptvvoFpmlAUBeVyGaJ4fPFZZf/888/o9/uYz+coFApxZCUIwumTqCsicxLCMES328XTp08xGAzw559/Yn9/H6VSCZ9++inu3bsHQkjcr5/2XuPxGD/88APG4zEkSUIYhokG9KvkWiVEURTH/bZtx93Oy5cv46u3VqtBVVVsb29D13WIoghBEM7Vn2etG2JcqwTf9zEej+E4Dp48eYKffvoJ4/EYlmXBsixomoYvv/wSu7u70HUd9Xo9cWTDrng2DmTt6l/k2iREUYQgCOA4DubzOXq9HprNJgaDQTw3IIRgfX0djUYDgiCgWCweG5a++d6Lj6yTqoTFiphOp/Fs9/DwELZtYzabodvtYjabod/vo1qtQtd1VCoVlMtlVCoVbG5ughBy7i5oGUhdQhAEoJSi1+uh0+nAsiw8evQIL168wHQ6xcHBAWazGer1OhqNBsrlMj766CPs7u5CkiQoihLPB3IJ54BSivl8Dt/3MZlM4r5+NBphNBphOp3Ctm04joMoiqCqKsrlMqrVKtbW1k4MQW8SqX3LKIqwv7+PX3/9FZZlYT6fYz6fI4oiEEJw9+7d+EonhGBtbQ1bW1soFouo1WqZieGvglQksHFgf38f33//PV69eoVCoYBisQhVVXHv3j3U63UYhoFGo4FqtQpBEOIVTp7ncwmXwWL04zgONE3DysoKNE2LB15d16EoCkqlEnieTxT53ESuZGAWBAGffPIJ7t+/D0VRYBgGNE2DLMvQNO1GRz5JSLU7Yg+O4/Dee+/hq6++iq/621zpb5Jqx8uWi3meX6rJ01WT+ujHBlm2TuT7PoIgSPtjl4oraQnAf+NDEgG3rdVcyWyItQZCSHxXC/jfIhtrGZPJBMPhEJ7nYTAYYDAYQJZlbG9vo1arQRRFyLJ8IyOo1CWw1iCKIgghkCQplhAEAabTKTzPQ7vdxt7eHizLwpMnT7C3t4eVlRV89913+Pzzz1EsFuP5xE0jdQmL60ee5x2JjDzPw2Qyged58ZLGeDxGt9tFp9OB4ziwbTveLXFTu6dUJLCr3/d92LaN4XCIhw8fQlVViKIYd0G+72M2m4FSCkrpkYGbRVWUUjiOA0EQMn1P4CKk2hLYTZt+v4+HDx9iOBwCAGazGVzXjUUEQYBarYatra1YEmsxvu9jPp+DEJJLOCscx0GWZRiGAUopVFU9Mh6wSmVdTLVaxcrKCgRBgKqqbx3EbyqpdUcA8O677+Lbb7/FaDRCqVSCqqrxHTJJkkAIgaIoEEURxWIRmqbB930IgoDDw0MoigJZlm/sWMBItSWsrq7is88+g+M48f8JITBNE7quQ5ZlmKZ5ZBPXfD7Hs2fPUC6XUSgUIIpiLuEiFAoFVCoVeJ4X/491N6w1vBlyLk7ubnrlM1KVoOs6tre3j/TnHMfF94x5nj/27tltmjWnKkGSJEiSdObX3SYBQH5wMBPkEjJALiED5BIyQC4hA+QSMkAuIQPkEjJALiED5BIyQC4hA+QSMkAuIQPkEjJALiED5BIywK2TkMUt+Ushgd0ePe+dNvY6juMgCMKRrTRZIPMSWAVeRACTuHgeLksSLv0eMzsuy7Y4WpaFIAgSf3HXddFqtTAcDqEoCiilZz5M/mYuI3Y2otPp4PHjx/FWmpMOJzJ5oihC07Q4hRvbmHaZXLqEyWSCP/74A4PBAC9evMBvv/2G2WwW78o+DUopnj59imazCdM04bouCoVCoqwui7CrnmX/sm0bv/zyC9rtdrzT46Qd3r7vg1IKRVHQaDSwtbUFwzCwu7uLSqWSuBxJSKUlDAYDdLtdtFot/P7775hMJol3XrBEuKPRCMViEWEYQhCEcx0uXHx+EAR4/fo1JpNJPDac9H6e58HzvDjNg6Io4Hkevu+fqQxJuHQJnudhOByi2+0iCAJsbGyAUgrDMGAYRuIcRZZloVKp4IMPPkClUjnzARFWwe+88w6+/vprDAaDuFsDcKKEMAzR7/fR7/chSRKCIEC32wUhZDkkuK6LTqeDVqsFSZKws7MDSZLw/vvvY2dnJ3GqBI7jIEkS1tfXUalUznXOmeM4fPjhhzAMA77vw/M8+L5/JFp6G5RS/PXXX2g2m/B9H47joNVqQRRFuK57pjIk4dIlRFEEz/Pgui4IISgWiygWi6hUKlhdXU0kgSWUFQQhTrsAnC/GL5VKWF9fRxAEcF33yL7Y4/B9H71eD5qmYT6fxwfiFwVeJqnswGN9eKFQiCOLcrl8at46Bgsj2Tm3i4STPM9DkiREURSfezsNSmmccYAQgul0emo0dREuXQKLSliuCk3T4uwtSSUsvtdFYRcEkHyuQSmFrusol8vx92ARVRrzi1TPJ7C/33xcF2eZZ7AKv4oypzpjZpt6kyYXzxKLCW7TLnvqyxbLVvmMRQlpk4qExRAwi2s1SWATuqvIu5TaJ7DsLmy5YtlEsDCZRUVpdkupptoB/j+/xTJ0T28re5qkIoF1QaPRCHt7eyCEYDweo9frLUVaBEopnj9/jv39fVBK4bpuqinhUpsn8DyPV69e4eXLl6CU4s6dO9jY2FiK3HZsEbHT6YAQgnq9jtXV1eWZJ7A1n0KhAI7j4LpufI9hPB4vjYTJZBJnr2SHHS86ez+OS5eg6zoajQY2NjbQ6/WwtbUFz/OgKAoURVmKwXkxo7Esy6jX61hbW4Npmol+LeqsXLoETdPw8ccfw3VdDIdD7OzsxJnhlw227lSr1VCtViFJ0nJIYAXnOC7+sQl2mHyZRLBuczFVdFobBC5dAstdIcsyZFmGqqoX3i1xHbDK5nk+zj6QVu7W1AZmAPFSds7JJJLArmDLslItzE2C1VWS1p9Igm3bAIDNzc0LFOt2Yts2yuXyic/hogSq8p8CPjvRGX4KOJGEnHTJ/vT1FpBLyAC5hAyQS8gAuYQMkEvIALmEDPAvC37rjQ00w50AAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Converte a imagem para um array NumPy e normaliza\n",
        "nova_imagem_array = np.array(nova_imagem) / 255.0\n",
        "\n",
        "# Expande a dimens√£o do array para que ele tenha o formato (1, 28, 28, 1)\n",
        "nova_imagem_array = np.expand_dims(nova_imagem_array, axis = 0)\n",
        "\n",
        "# Fazendo a previs√£o!\n",
        "previsoes = modelo_lia.predict(nova_imagem_array)\n",
        "\n",
        "print(previsoes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "O7KGG1xgC_tk",
        "outputId": "29f55390-ca19-4ec2-bc07-337cdaa62ce7"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 90ms/step\n",
            "[[0.12420467 0.05801213 0.03115848 0.02445195 0.02309995 0.02389943\n",
            "  0.0078832  0.00591429 0.68555003 0.01582592]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Carrega uma nova imagem\n",
        "nova_imagem = Image.open(\"/content/drive/MyDrive/LIA/Aula 08/f3efd3ca626359f8e18fc075bf35760e.jpg\")\n",
        "\n",
        "# Obt√©m a classe com maior probabilidade e o nome da classe\n",
        "classe_prevista = np.argmax(previsoes)\n",
        "nome_classe_prevista = nomes_classes[classe_prevista]\n",
        "\n",
        "print(\"A nova imagem foi classificada como o n√∫mero:\", nome_classe_prevista)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RXYcFzcgEdNZ",
        "outputId": "a5c1de38-d283-453a-b165-e7a98d6a9fb3"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "A nova imagem foi classificada como o n√∫mero: 8\n"
          ]
        }
      ]
    }
  ]
}